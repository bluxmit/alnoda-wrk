{   
    "Common": {
        "find . -name [file name]": "find file location",
        "curl [URL]": "send GET request to URL (get webpage dwnload file)",
        "wget [file URL]": "download a single file from Iternet",
        "tar -xzf [tar.gz file]": "unzip tar.gz archeive file",
        "unzip [.zip file]": "unzip .zip archeive file"
    },
    "Install apps": {
        "sudo apt-get update": "update package lists (do this before apt-get install)",
        "sudo apt-get install [package]": "install new package with apt",
        "nix-env -iA [package]": "install nix package",
        "pipx install [application]": "Install and run python applications in isolated environment"
    },
    "Node": {
        "nodeenv --node=[node version] env": "Install node.js evironment (in the current folder)",
        ". env/bin/activate ": "Activate node.js evironment (in the current folder)",
        "npm install -g [package name]": "istall node.js package [package name]"
    },
    "Python": {
        "python": "start python shell",
        "pip install [package name]": "istall python package [package name]"
    },
    "Git": {
        "git config --global credential.helper cache": "save git user, email and password (after next enter)",
        "git config --global user.name '[user name]'": "enter git user name",
        "git config --global user.email '[email]'": "set an email address that will be associated with each history marker",
        "git config --global user.password '[password]'": "eter git password (GitHub, GitLab, Bitbucket, etc)",
        "git status": "show modified files, staged for your next commit",
        "git add .": "add all modified files (stage) to the next commit",
        "git commit -m '[descriptive message]'": "commit staged files",
        "git push": "push local commits to the remote repository",
        "git pull": "fetch and merge any commits from remote",
        "git branch": "list git branches",
        "git branch [branch-name]": "create new branch",
        "git checkout [branch-name]": "switch to branch [branch-name]",
        "git merge [branch-name]": "merge [branch-name] into current bruch",
        "git branch --delete [branch-name]": "delete branch",
        "lazygit": "open lazygit UI"
    },
    "Text editors": {
        "nano": "open nano editor (new file)",
        "nano [file name]": "edit file [file name] with nano editor",
        "vim": "open vim editor (new file)",
        "vim [file name]": "edit file [file name] with vim editor",
        "mcedit": "open mcedit editor (new file)", 
        "mcedit [file name]": "edit file [file name] with mcedit editor",
        "tilde": "open tilde editor (new file)",
        "tilde [file name]": "edit file [file name] with tilde editor"
    },
    "Manage apps and services": {
        "[cmd to run program] &!": "program won't get killed upon exiting the terminal",
        "ps axf": "list all running processes (in forest)",
        "kill [PID]": "kill process with [PID]",
        "pm2 ls": "lits processes started with pm2 process manager",
        "pm2 start [application] --name [name]": "start application and daemonize with pm2 process manager",
        "pm2 start [application] --name [name] -- [flags]": "start application with flags",
        "pm2 stop [application]": "stop application daemonized by pm2 process manager",
        "tmux ls": "list tmux sessions",
        "tmux new -s [session name]": "start new tmux session",
        "Ctrl + b d": "dettach from tmux session",
        "tmux a -t [session name]": "attach to tmux session [session name]",
        "tmux kill-session -t [session name]": "kill tmux session",
        "tmux kill-session -a": "kill all mux sessions"
    },
    "Admin": {
        "crontab -l": "list scheduled tasks",
        "crontab -e": "edit cron task schedule",
        "glances": "Open glances system processes and resources monitor",
        "ncdu": "explore file/folder sizes",
        "telnet [host] [port]": "connect to remote system over a TCP/IP network",
        "dig [domain name]": "perform a DNS lookup for a domain name",
        "nslookup [domain name]": "obtain server records for a domain name"
    },
    "Shortcuts": {
        "pm2 start python --name http-server --  -m http.server 8030": "launch static web server on port 8030 (My app o 8030)"
    }
}